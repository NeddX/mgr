#+TITLE: MGR

* Compilation
Clone the repository *recursively!*
#+begin_src bash
git clone --recursive https://github.com/NeddX/mgr
#+end_src

** Note
Cross-compilation does not work for now.

** Ubuntu
To compile this project on Ubuntu, please follow the steps below.

*** Prequisites
- CMake /3.20+/
- GCC /13+ (for libstdc++13 used by clang)/
- Clang /17+/
- GNU Makefile /(should come by default on any Unix-like machine)/

You're going to add extra repositories for APT so download the following.
#+begin_src bash
sudo apt install -y wget software-properties-common apt-transport-https gnupg lsb-release
#+end_src

And also update your system just in case.
#+begin_src bash
sudo apt update -y && sudo apt upgrade -y
#+end_src

**** CMake
Add Kitware's APT repo for the latest CMake package.
#+begin_src bash
wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc | sudo apt-key add -
#+end_src
#+begin_src bash
sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
#+end_src

Now refreh your repos and install CMake.
#+begin_src bash
sudo apt update -y && sudo apt install cmake
#+end_src

**** GCC
Add Ubuntu toolchain test builds repository.
#+begin_src bash
sudo add-apt-repository ppa:ubuntu-toolchain-r/test
#+end_src

Install GCC-13.
#+begin_src bash
sudo apt install gcc-13 g++-13
#+end_src

**** Clang
Download and run the following script.
#+begin_src bash
wget https://apt.llvm.org/llvm.sh
#+end_src

Add execution permission for the shell script.
#+begin_src bash
chmod +x llvm.sh
#+end_src

Run the script with the desired clang version.
#+begin_src bash
sudo ./llvm.sh 17
#+end_src

Now install clang with your desired version from apt.
#+begin_src bash
sudo apt install clang-17
#+end_src

(Optional) Set clang-17 as default.
#+begin_src bash
sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-17 100
sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-17 100
#+end_src

(Optional) Switch the versions.
#+begin_src bash
sudo update-alternatives --config clang
sudo update-alternatives --config clang++
#+end_src

** Compilation
To compile the project run the following commands.

Generate the CMake files via =CMakePresets.json= with =linux-any-debug= configuration.
#+begin_src bash
cmake --preset=linux-any-debug
#+end_src

You should have a =builds/linux-any-debug= directory if the above command ran successfully so build the project.
#+begin_src bash
cmake --build builds/linux-any-debug
#+end_src

** Running the application
The application is under =builds/linux-any-debug/pciemgr= called =mgrd=.
It supports the following options:
- =--daemon | -d=: Runs as a daemon /(not yet developed)/.
- =--rc | -r=: Runs as the Root Complex.
- =--camconf=<path> | -cf=<path>=: Loads the camera configuration from the specified file.
- =--sendstr=<quoted str> | -s=<quoted str>=: Sends a string to the Root Complex and disconnects.
